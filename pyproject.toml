[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "wwpdb.utils.db"
dynamic = ["version"]
description = "wwPDB Python DB Schema Utilities"
readme = "README.md"
license = "Apache-2.0"
authors = [
    { name = "Ezra Peisach", email = "ezra.peisach@rcsb.org" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.6",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",    
]
dependencies = [
    "mmcif",
    "mmcif_utils",
    "mysqlclient",
    "rcsb.utils.multiproc",
    "scandir",
    "sqlalchemy ~= 1.3",
    "sqlparse",
    "wwpdb.io",
    "wwpdb.utils.config",
]

requires-python = ">=3.8"

[project.optional-dependencies]
dev = [
    "check-manifest",
]
test = [
    "coverage",
]
status = [
    "wwpdb.utils.dp"
]
[project.urls]
Homepage = "https://github.com/rcsb/py-wwpdb_utils_db"

[tool.hatch.version]
path = "wwpdb/utils/db/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/wwpdb",
]

exclude = ["/wwpdb/mock-data"]

[tool.hatch.build.targets.wheel]
packages = ["wwpdb"]

exclude = ["/wwpdb/mock-data"]

#=================================== Ruff basics =============================#
[tool.ruff]

line-length = 160 # 120 is hatch's default via 'hatch init'
include = [
  "*.py",           # Source
  "pyproject.toml", # This file (RUF rules only)
  "*.ipynb",        # Jupyter notebooks
]

#
#=================================== Ruff lint ==============================#

[tool.ruff.lint]

#
# ------------------------- Ruff misc. options ----------------------
preview = true
explicit-preview-rules = true

ignore = [
  "C402",     #  Unnecessary generator (rewrite as a `dict` comprehension)
  "EXE001",   # Shebang is present but file is not executabl
  "FBT002",   # Boolean default positional argument in function definition
  "FBT001",   # Boolean-typed positional argument in function definition
  "FURB113",  # Use `stPL.extend(...)` instead of repeatedly calling `stPL.append()`
  "INP001",   # File `xx` is part of an implicit namespace package. Add an `__init__.py
  "N801",     # Class name `markdownTests` should use CapWords convention
  "N802",     # Function name should be lowercase
  "N803",     # Argument name should be lowercase
  "N806",     # in function should be lowercase
  "N815",     # Caiable... in class shope should not be mixedCase
  "N816",     # Variable in global scope should not be mixedCase
  "N999",     # Invalid module name,
  "PERF401",  # Use a list comprehension to create a transformed list
  "PERF403",  #  Use a dictionary comprehension instead of a for-loop
  "PLR1714",  # Consider merging multiple comparisons
  "PLR2004",  # Magic value used in comparison, consider replacing
  "PLR2044",  # Removes empty comments
  "PLR6104",  # Use `+=` to perform an augmented assignment directly
  "PLR6201",  # Use a `set` literal when testing for membership
  "PLR6301",  # Method `` could be a function, class method, or static method
  "PLW1514",  # `open` in text mode without explicit `encoding` argument
  "PT009",    # Use a regular `assert` instead of unittest-style `assertGreater`
  "RET504",   # Unnecessary assignment to `X` before `return` statement
  "RUF100",   # RUF REMOVES FLAKE8 noqa!
  "S110",     # `try`-`except`-`pass` detected, consider logging the exception
  "SIM102",   # Use a single `if` statement instead of nested `if` statements
  "SIM103",   #  Return the condition directly
  "SIM108",   # Use ternary operator
  "SIM115",   # Use context handler for opening files
  "TRY300",   # Consider moving this statement to an `else` block
  "TRY400",   # Use `logging.exception` instead of `logging.error`
  "TRY401",   # Redundant exception object included in `logging.exception` call
  "UP008",    # Use `super()` instead of `super(__class__, self)`
  "UP031",     # Use format specifiers instead of percent format
  "UP032"     # Use f-string instead of `format` call
]

# -------------------- default environment scripts ------------------
[tool.hatch.envs.default]
skip-install = true
dependencies = ["mypy", "ruff >=0.6.9", "wwpdb.utils.testing", "scandir", "mysqlclient", "sqlalchemy ~= 1.3", "scandir"]


[tool.hatch.envs.default.scripts]

# 'format' formats and fixes issues but does not complain
format = [
  "ruff format",
  "ruff check --fix-only",
]

# 'format-python' just excludes Prettier
format-python = ["ruff format", "ruff check --fix-only"]

# 'check' only checks but never fixes
check = ["ruff check --no-fix .", "mypy --non-interactive --install-types -p wwpdb -p tests"]

# only checks with ruff (mypy has a lot of false positives)
check-ruff = "ruff check --no-fix . {args}"

# to complement 'check-ruff'
check-mypy = "mypy --non-interactive --install-types -p wwpdb -p tests {args}"

# only check security via Bandit; we require these rules to pass
check-security = "ruff check --select S --no-fix ."

# -----------------------  testing environment ----------------
[tool.hatch.envs.hatch-test]
dependencies = ["tox"]

[tool.hatch.envs.hatch-test.scripts]
run = ["tox"]


# -------------------------  Mypy disable ---------
[[tool.mypy.overrides]]
#module = ["mmcif.*", "wwpdb.*", "tests.*", "commonsetup", "gemmi.*", "pygal.*"]
module = ["mmcif_utils.*", "mmcif.*", "wwpdb.*", "rcsb.utils.multiproc.*", "sqlalchemy.*", "scandir", "sqlparse"]
ignore_missing_imports = true

[tool.mypy]
exclude = [
	"test-output",
]

# ------------------------ ruff disable per file
[tool.ruff.lint.per-file-ignores]
#"wwpdb/utils/dp/electron_density/*" = ["G004", "G001"]  #  Logging statement uses f-string

#"tests/*" = ["TID252", "PLC1901", "S311", "T201"]